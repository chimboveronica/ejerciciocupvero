
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 09 20:16:32 COT 2015
//----------------------------------------------------

package ejerciociocupvero;

import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 09 20:16:32 COT 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\003\011\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\024\003\015\004\006\005\007\006\005\007" +
    "\004\010\013\012\014\013\016\014\010\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\ufffa\001\002\000\004\002\ufff7" +
    "\001\002\000\004\013\034\001\002\000\004\002\033\001" +
    "\002\000\006\002\ufffe\012\021\001\002\000\004\002\ufff9" +
    "\001\002\000\004\010\017\001\002\000\004\002\ufff8\001" +
    "\002\000\004\012\021\001\002\000\004\002\uffff\001\002" +
    "\000\004\014\022\001\002\000\012\004\025\005\027\006" +
    "\024\007\026\001\002\000\004\011\030\001\002\000\010" +
    "\002\ufff3\011\ufff3\013\ufff3\001\002\000\010\002\ufff5\011" +
    "\ufff5\013\ufff5\001\002\000\010\002\ufff2\011\ufff2\013\ufff2" +
    "\001\002\000\010\002\ufff4\011\ufff4\013\ufff4\001\002\000" +
    "\004\014\031\001\002\000\012\004\025\005\027\006\024" +
    "\007\026\001\002\000\006\002\ufff6\013\ufff6\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\006\002\011\003\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




      public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
    if("#0".equals(info.toString())){
          System.out.println("Estoy receptando un valor nulo/ falta ;");
           System.out.println("Por lo que te Sugiero: "+message);
        }

if("#1".equals(info.toString())){
          System.out.println("La sintaxis ingresada en incorrecta");
           System.out.println("Por lo que te Sugiero: "+message);
        }

        if("#2".equals(info.toString())){
          System.out.println("Error se esperaba una K");
           System.out.println("Por lo que te Sugiero: "+message);
        }

        if("#3".equals(info.toString())){
          System.out.println("Error se esperaba una M");
           System.out.println("Por lo que te Sugiero: "+message);
        }

        if("#4".equals(info.toString())){
          System.out.println("Se esperaba una S");
           System.out.println("Por lo que te Sugiero: "+message);
        }
        if("#5".equals(info.toString())){
          System.out.println("Se esperaba una H");
           System.out.println("Por lo que te Sugiero: "+message);
        }
 if("#6".equals(info.toString())){
          System.out.println("ID inválido");
           System.out.println("Por lo que te Sugiero: "+message);
        }
         if("#7".equals(info.toString())){
          System.out.println("Se esperaba un /");
           System.out.println("Por lo que te Sugiero: "+message);
        }

  if("#8".equals(info.toString())){
          System.out.println("Se esperaba un =");
           System.out.println("Por lo que te Sugiero: "+message);
        }

if("#9".equals(info.toString())){
          System.out.println("Se esperaba un ;");
           System.out.println("Por lo que te Sugiero: "+message);
        }
    if(info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
      /* Comprueba si el numero de línea es mayor o igual que cero */
      String linea="";
      String columna="";

      if(s.left >= 0) {

        linea=""+s.left+1;
        m.append(" en linea "+(s.left+1));
        /*Comprueba si el numero de columna es mayoro igual que cero */
        if (s.right >= 0){
            columna=""+s.right+1;
        }
            m.append(", y columna "+(s.right+1));
      }
      if (!linea.equals("")&&!columna.equals("")) {
  System.out.println("El error se ha detectado en la linea: "+linea+" y la columna: "+columna);
}else{

  System.out.println("No se ha ingresado datos correctos");

}
    }


    m.append(" : "+message);
    //System.err.println(m);
    }
   
public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		//System.exit(1);
    }

    public void conversion(String a, String b, int a1,int b1){
 
  double c;  
 c=a1/b1;
 
  System.out.print(" La Velocidad de:\n"+a1+" "+a+"/"+b1+""+b+"="+c+""+a+"/"+b+"\n"); 
 
}

        public static void main(String[] args) throws FileNotFoundException, Exception{
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***"+result);
        } catch (NullPointerException ex) {
            System.out.println("Tenemos Problemas con la Sintaxis");
                   }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unidad ::= HORA 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              RESULT = h.toString();
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("unidad",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // unidad ::= SEGUNDOS 
            {
              Object RESULT =null;
		int sgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int sgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object sg = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              RESULT = sg.toString();
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("unidad",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // unidad ::= METROS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              RESULT = m.toString();
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("unidad",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // unidad ::= KILOMETROS 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              RESULT = k.toString();
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("unidad",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= ID IGUAL NUMERO unidad DIV NUMERO unidad 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 parser.conversion(m1.toString(),m2.toString(),n.intValue(),n1.intValue());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista ::= NUMERO 
            {
              Object RESULT =null;
		 System.out.println("Sentencia ingresada  incorrectamente.");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista ::= PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Sentencia ingresada  incorrectamente.");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista ::= IGUAL 
            {
              Object RESULT =null;
		 System.out.println("Sentencia ingresada  incorrectamente.");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista ::= METROS 
            {
              Object RESULT =null;
		 System.out.println("Sentencia ingresada  incorrectamente.");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista ::= HORA 
            {
              Object RESULT =null;
		 System.out.println("Sentencia ingresada incorrectamente.");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista ::= SEGUNDOS 
            {
              Object RESULT =null;
		 System.out.println("Sentencia ingresada  incorrectamente.");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista ::= KILOMETROS 
            {
              Object RESULT =null;
		 System.out.println("Sentencia ingresada  incorrectamente.");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista ::= ID 
            {
              Object RESULT =null;
		 System.out.println("Sentencia ingresada incorrectamente.");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista ::= error expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 parser.report_error("revise la sintaxis",e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lista EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lista ::= expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Sentencia correcta sin errores.");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

